games %>%  filter(OpeningTotal!=0 & ClosingTotal!=0)
games %>%  filter(OpeningTotal!=0)
games %>%  filter(OpeningTotal==0)
games %>%  filter(OpeningTotal==0 & ClosingTotal==0)
games %>%  filter(OpeningTotal==0 & ClosingTotal!=0)
games %>%  filter(OpeningTotal!=0 & ClosingTotal==0)
games %>%  filter(OpeningTotal==0 & ClosingTotal!=0)
# Read in games, backtest, live, exp pts
games <- dbGetQuery(dev, "SELECT SynergyGameId as GameId,GameDate,SynergySeasonTagId Season, SynergyGameSubType as GameType,HomeConferenceLevel,AwayConferenceLevel,NeutralIndicator,
OpeningSpread,ClosingSpread,OpeningTotal,ClosingTotal, (CASE WHEN Opening1stHalfTotal is Null THEN OpeningTotal_FirstHalf_pinnacle_Over ELSE Opening1stHalfTotal END) as OpeningTotal1H,
(CASE WHEN Closing1stHalfTotal is NULL THEN ClosingTotal_FirstHalf_pinnacle_Over ELSE Closing1stHalfTotal END) as ClosingTotal1H,
(CASE WHEN Opening1stHalfSpread is NULL THEN OpeningSpread_FirstHalf_pinnacle_Home ELSE Opening1stHalfSpread END) as OpeningSpread1H,
(CASE WHEN Closing1stHalfSpread is NULL THEN ClosingSpread_FirstHalf_pinnacle_Home ELSE Closing1stHalfSpread END) as  ClosingSpread1H,
OpeningMoneyLine_FirstHalf_pinnacle_Home ForVigOpen1H,
ClosingMoneyLine_FirstHalf_pinnacle_Home ForVigClose1H,
(CASE WHEN OpeningHomeMoney is NULL THEN OpeningMoneyLine_FullGame_pinnacle_Home ELSE OpeningHomeMoney END) as ForVigOpen,
(CASE WHEN ClosingHomeMoney is NULL THEN ClosingMoneyLine_FullGame_pinnacle_Home ELSE ClosingHomeMoney END) as ForVigClose,
OpeningMoneyLine_FirstHalf_pinnacle_Away AgainstVigOpen1H,
ClosingMoneyLine_FirstHalf_pinnacle_Away AgainstVigClose1H,
(CASE WHEN OpeningAwayMoney is NULL THEN OpeningMoneyLine_FullGame_pinnacle_Away ELSE OpeningAwayMoney END) as AgainstVigOpen,
(CASE WHEN ClosingAwayMoney is NULL THEN ClosingMoneyLine_FullGame_pinnacle_Away ELSE ClosingAwayMoney END) AgainstVigClose,
AwayScore_Half1, G.AwayScore, HomeScore_Half1,G.HomeScore FROM  NCAAB.Proc_Games G
LEFT JOIN
NCAAB.Proc_SBR_Games S
ON G.SBRGameId = S.SBRGameId
WHERE G.HomeScore is not Null;") %>% mutate(GameDate = as.Date(GameDate),
Conference = ifelse(is.na(AwayConferenceLevel) |is.na(HomeConferenceLevel),NA, paste(AwayConferenceLevel,"@",HomeConferenceLevel))) %>%
select(-AwayConferenceLevel,-HomeConferenceLevel) %>%
filter(ClosingTotal!=0) %>%
mutate(OpeningTotal = ifelse(OpeningTotal==0, ClosingTotal, OpeningTotal))
games
install.packages("arrow")
dev <- dbcon("BASKETBALL_DEV_")
library(shiny)
library(arrow)
library(blaio)
library(DBI)
library(RMySQL)
library(dplyr)
library(DT)
library(shinyWidgets)
library(shinydashboard)
library(shinydashboardPlus)
library(ggplot2)
library(zoo)
library(stringr)
library(shinyjs)
library(svDialogs)
library(aws.s3)
dev <- dbcon("BASKETBALL_DEV_")
s3read_using(object = "ncaab-odds/odds.parquet", FUN = read.parquet,
bucket = "odds.parquet", opts = list(region="us-east-1"))
early_lines <-  s3read_using(object = "ncaab-odds/odds.parquet", FUN = read.parquet,
bucket = "data-acquisition-basketball", opts = list(region="us-east-1"))
early_lines <-  s3read_using(object = "ncaab-odds/odds.parquet", FUN = read_parquet,
bucket = "data-acquisition-basketball", opts = list(region="us-east-1"))
early_lines
runApp('Documents/BLA/bla-common-models/model_bias')
early_lines
early_lines %>% as.data.frame()
# Read in games, backtest, live, exp pts
games <- dbGetQuery(dev, "SELECT SynergyGameId as GameId,GameDate,SynergySeasonTagId Season, SynergyGameSubType as GameType,HomeConferenceLevel,AwayConferenceLevel,NeutralIndicator,
OpeningSpread,ClosingSpread,OpeningTotal,ClosingTotal, (CASE WHEN Opening1stHalfTotal is Null THEN OpeningTotal_FirstHalf_pinnacle_Over ELSE Opening1stHalfTotal END) as OpeningTotal1H,
(CASE WHEN Closing1stHalfTotal is NULL THEN ClosingTotal_FirstHalf_pinnacle_Over ELSE Closing1stHalfTotal END) as ClosingTotal1H,
(CASE WHEN Opening1stHalfSpread is NULL THEN OpeningSpread_FirstHalf_pinnacle_Home ELSE Opening1stHalfSpread END) as OpeningSpread1H,
(CASE WHEN Closing1stHalfSpread is NULL THEN ClosingSpread_FirstHalf_pinnacle_Home ELSE Closing1stHalfSpread END) as  ClosingSpread1H,
OpeningMoneyLine_FirstHalf_pinnacle_Home ForVigOpen1H,
ClosingMoneyLine_FirstHalf_pinnacle_Home ForVigClose1H,
(CASE WHEN OpeningHomeMoney is NULL THEN OpeningMoneyLine_FullGame_pinnacle_Home ELSE OpeningHomeMoney END) as ForVigOpen,
(CASE WHEN ClosingHomeMoney is NULL THEN ClosingMoneyLine_FullGame_pinnacle_Home ELSE ClosingHomeMoney END) as ForVigClose,
OpeningMoneyLine_FirstHalf_pinnacle_Away AgainstVigOpen1H,
ClosingMoneyLine_FirstHalf_pinnacle_Away AgainstVigClose1H,
(CASE WHEN OpeningAwayMoney is NULL THEN OpeningMoneyLine_FullGame_pinnacle_Away ELSE OpeningAwayMoney END) as AgainstVigOpen,
(CASE WHEN ClosingAwayMoney is NULL THEN ClosingMoneyLine_FullGame_pinnacle_Away ELSE ClosingAwayMoney END) AgainstVigClose,
AwayScore_Half1, G.AwayScore, HomeScore_Half1,G.HomeScore FROM  NCAAB.Proc_Games G
LEFT JOIN
NCAAB.Proc_SBR_Games S
ON G.SBRGameId = S.SBRGameId
WHERE G.HomeScore is not Null;") %>% mutate(GameDate = as.Date(GameDate),
Conference = ifelse(is.na(AwayConferenceLevel) |is.na(HomeConferenceLevel),NA, paste(AwayConferenceLevel,"@",HomeConferenceLevel))) %>%
select(-AwayConferenceLevel,-HomeConferenceLevel) %>%
filter(ClosingTotal!=0) %>%
mutate(OpeningTotal = ifelse(OpeningTotal==0, ClosingTotal, OpeningTotal))
new_odds_cols = c("spread_1H_10am", "total_1H_10am", "home_ML_1H_10am", "away_ML_1H_10am", "spread_FG_10am", "total_FG_10am", "home_ML_FG_10am", "away_ML_FG_10am")
old_odds_cols = c("ClosingSpread1H", "ClosingTotal1H", "ForVigClose1H", "AgainstVigClose1H", "ClosingSpread", "ClosingTotal", "ForVigClose", "AgainstVigClose")
early_lines <-  s3read_using(object = "ncaab-odds/odds.parquet", FUN = read_parquet,
bucket = "data-acquisition-basketball", opts = list(region="us-east-1")) %>%
games <- games %>%
inner_join(early_lines, by=c("GameId"="event_id"))
early_lines <-  s3read_using(object = "ncaab-odds/odds.parquet", FUN = read_parquet,
bucket = "data-acquisition-basketball", opts = list(region="us-east-1"))
games <- games %>%
inner_join(early_lines, by=c("GameId"="event_id"))
games
# Grab 10am lines, ignore gamedate
early_lines <-  s3read_using(object = "ncaab-odds/odds.parquet", FUN = read_parquet,
bucket = "data-acquisition-basketball", opts = list(region="us-east-1")) %>%
select(-GameDate)
games <- games %>%
inner_join(early_lines, by=c("GameId"="event_id"))
games[, old_odds_cols] = games[, new_odds_cols]
games[, new_odds_cols]
new_odds_cols
games
# Read in games, backtest, live, exp pts
games <- dbGetQuery(dev, "SELECT SynergyGameId as GameId,GameDate,SynergySeasonTagId Season, SynergyGameSubType as GameType,HomeConferenceLevel,AwayConferenceLevel,NeutralIndicator,
OpeningSpread,ClosingSpread,OpeningTotal,ClosingTotal, (CASE WHEN Opening1stHalfTotal is Null THEN OpeningTotal_FirstHalf_pinnacle_Over ELSE Opening1stHalfTotal END) as OpeningTotal1H,
(CASE WHEN Closing1stHalfTotal is NULL THEN ClosingTotal_FirstHalf_pinnacle_Over ELSE Closing1stHalfTotal END) as ClosingTotal1H,
(CASE WHEN Opening1stHalfSpread is NULL THEN OpeningSpread_FirstHalf_pinnacle_Home ELSE Opening1stHalfSpread END) as OpeningSpread1H,
(CASE WHEN Closing1stHalfSpread is NULL THEN ClosingSpread_FirstHalf_pinnacle_Home ELSE Closing1stHalfSpread END) as  ClosingSpread1H,
OpeningMoneyLine_FirstHalf_pinnacle_Home ForVigOpen1H,
ClosingMoneyLine_FirstHalf_pinnacle_Home ForVigClose1H,
(CASE WHEN OpeningHomeMoney is NULL THEN OpeningMoneyLine_FullGame_pinnacle_Home ELSE OpeningHomeMoney END) as ForVigOpen,
(CASE WHEN ClosingHomeMoney is NULL THEN ClosingMoneyLine_FullGame_pinnacle_Home ELSE ClosingHomeMoney END) as ForVigClose,
OpeningMoneyLine_FirstHalf_pinnacle_Away AgainstVigOpen1H,
ClosingMoneyLine_FirstHalf_pinnacle_Away AgainstVigClose1H,
(CASE WHEN OpeningAwayMoney is NULL THEN OpeningMoneyLine_FullGame_pinnacle_Away ELSE OpeningAwayMoney END) as AgainstVigOpen,
(CASE WHEN ClosingAwayMoney is NULL THEN ClosingMoneyLine_FullGame_pinnacle_Away ELSE ClosingAwayMoney END) AgainstVigClose,
AwayScore_Half1, G.AwayScore, HomeScore_Half1,G.HomeScore FROM  NCAAB.Proc_Games G
LEFT JOIN
NCAAB.Proc_SBR_Games S
ON G.SBRGameId = S.SBRGameId
WHERE G.HomeScore is not Null;") %>% mutate(GameDate = as.Date(GameDate),
Conference = ifelse(is.na(AwayConferenceLevel) |is.na(HomeConferenceLevel),NA, paste(AwayConferenceLevel,"@",HomeConferenceLevel))) %>%
select(-AwayConferenceLevel,-HomeConferenceLevel) %>%
filter(ClosingTotal!=0) %>%
mutate(OpeningTotal = ifelse(OpeningTotal==0, ClosingTotal, OpeningTotal))
new_odds_cols = c("spread_1H_10am", "total_1H_10am", "home_ML_1H_10am", "away_ML_1H_10am", "spread_FG_10am", "total_FG_10am", "home_ML_FG_10am", "away_ML_FG_10am")
old_odds_cols = c("ClosingSpread1H", "ClosingTotal1H", "ForVigClose1H", "AgainstVigClose1H", "ClosingSpread", "ClosingTotal", "ForVigClose", "AgainstVigClose")
# Grab 10am lines, ignore gamedate
early_lines <-  s3read_using(object = "ncaab-odds/odds.parquet", FUN = read_parquet,
bucket = "data-acquisition-basketball", opts = list(region="us-east-1")) %>%
select(-GameDate)
games <- games %>%
inner_join(early_lines, by=c("GameId"="event_id"))
games[, new_odds_cols]
games[, old_odds_cols] = games[, new_odds_cols]
runApp('Documents/BLA/bla-common-models/model_bias')
#############################
# generate game predictions #
#############################
# Load neccessary libraries
library(dplyr)
library(data.table)
library(RMySQL)
library(zoo) # na.locf
library(stringr)
library(xgboost)
library(parallel)
library(doParallel)
library(Matrix)
library(splines)
library(glmnet)
library(MASS)
library(blaio)
library(DBI)
library(Hmisc)
library(aws.s3)
library(doSNOW)
library(reldist)
library(optparse)
glmnet.control(eps = 1.0e-12, fdev = 0, devmax = 1)
option_list <- list(
make_option("--fantasy_minutes",
type = "logical", default = FALSE,
help = "Specify the participation"
),
make_option("--sim_scenario",
type = "logical", default = TRUE,
help = "Specify if simulation"
),
make_option("--market_bias",
type = "logical", default = TRUE,
help = "Add market bias adjustment"
),
make_option("--market_bias_spread_pct",
type = "numeric", default = 0.6,
help = "percent of full adjustment applied on spreads"
),
make_option("--market_bias_total_pct",
type = "numeric", default = 0.7,
help = "percent of full adjustment applied on totals"
)
)
opt_parser <- OptionParser(option_list = option_list)
opt <- parse_args(opt_parser)
s3Bucket <- Sys.getenv("BASKETBALL_DEV_S3_BUCKET")
s3Folder <- "NBA/ZB/hyperParamsNew"
s3load(
object = paste0(s3Folder, "/", "current.RData"),
bucket = s3Bucket
)
playersId <- colnames(X_home[, groups_vec == 1])
playersId <- as.integer(gsub("usg$", "", playersId))
# Force neutral court
if (Sys.Date() <= as.Date("2020-10-13")) {
avg <- (X_home[, c("HCA", "HCA_p", "Season_HCA")] + X_away[, c("HCA", "HCA_p", "Season_HCA")]) / 2
X_home[, c("HCA", "HCA_p", "Season_HCA")] <- avg
X_away[, c("HCA", "HCA_p", "Season_HCA")] <- avg
}
knots_vec <- c(27)
boundary_knots <- c(18, 45)
aws_pool <- dbcon("DEVNBA_")
game_data <- dbReadTable(aws_pool, "Proc_NBAStats_Games")
game_data <- dbReadTable(aws_pool, "NBA.Proc_NBAStats_Games")
ModelVersion <- dbGetQuery(aws_pool, "Select max(ModelVersion) mv from NBA.ZB_backtest;")$mv
BacktestVersion <- dbGetQuery(aws_pool, paste0("Select max(BacktestVersion) bv from NBA.ZB_backtest where ModelVersion=", ModelVersion))$bv
bias_adjustments <- dbReadTable(aws_pool, "ZB_player_bias")
bias_adjustments <- dbReadTable(aws_pool, "NBA.ZB_player_bias")
# query modified player ratings for certain games
modified_player_ratings <- dbReadTable(aws_pool, "NBA.ZB_player_ratings_sim")
current_player_ratings <- dbReadTable(aws_pool, "NBA.ZB_player_ratings")
#############################
# generate game predictions #
#############################
# Load neccessary libraries
library(dplyr)
library(data.table)
library(RMySQL)
library(zoo) # na.locf
library(stringr)
library(xgboost)
library(parallel)
library(doParallel)
library(Matrix)
library(splines)
library(glmnet)
library(MASS)
library(blaio)
library(DBI)
library(Hmisc)
library(aws.s3)
library(doSNOW)
library(reldist)
library(optparse)
glmnet.control(eps = 1.0e-12, fdev = 0, devmax = 1)
option_list <- list(
make_option("--fantasy_minutes",
type = "logical", default = FALSE,
help = "Specify the participation"
),
make_option("--sim_scenario",
type = "logical", default = TRUE,
help = "Specify if simulation"
),
make_option("--market_bias",
type = "logical", default = TRUE,
help = "Add market bias adjustment"
),
make_option("--market_bias_spread_pct",
type = "numeric", default = 0.6,
help = "percent of full adjustment applied on spreads"
),
make_option("--market_bias_total_pct",
type = "numeric", default = 0.7,
help = "percent of full adjustment applied on totals"
)
)
opt_parser <- OptionParser(option_list = option_list)
opt <- parse_args(opt_parser)
s3Bucket <- Sys.getenv("BASKETBALL_DEV_S3_BUCKET")
s3Folder <- "NBA/ZB/hyperParamsNew"
s3load(
object = paste0(s3Folder, "/", "current.RData"),
bucket = s3Bucket
)
playersId <- colnames(X_home[, groups_vec == 1])
playersId <- as.integer(gsub("usg$", "", playersId))
# Force neutral court
if (Sys.Date() <= as.Date("2020-10-13")) {
avg <- (X_home[, c("HCA", "HCA_p", "Season_HCA")] + X_away[, c("HCA", "HCA_p", "Season_HCA")]) / 2
X_home[, c("HCA", "HCA_p", "Season_HCA")] <- avg
X_away[, c("HCA", "HCA_p", "Season_HCA")] <- avg
}
knots_vec <- c(27)
boundary_knots <- c(18, 45)
aws_pool <- dbcon("DEVNBA_")
game_data <- dbReadTable(aws_pool, "NBA.Proc_NBAStats_Games")
ModelVersion <- dbGetQuery(aws_pool, "Select max(ModelVersion) mv from NBA.ZB_backtest;")$mv
BacktestVersion <- dbGetQuery(aws_pool, paste0("Select max(BacktestVersion) bv from NBA.ZB_backtest where ModelVersion=", ModelVersion))$bv
bias_adjustments <- dbReadTable(aws_pool, "NBA.ZB_player_bias")
# query modified player ratings for certain games
modified_player_ratings <- dbReadTable(aws_pool, "NBA.ZB_player_ratings_sim")
current_player_ratings <- dbReadTable(aws_pool, "NBA.ZB_player_ratings WHERE RunDate>='2019-01-01'")
current_player_ratings
current_player_ratings$RunDate <- as.Date(current_player_ratings$RunDate)
current_player_ratings <- current_player_ratings[current_player_ratings$RunDate == max(current_player_ratings$RunDate), ]
# scale by usage
modified_player_ratings$UsgPct <- current_player_ratings$UsgPct[match(modified_player_ratings$PlayerId, current_player_ratings$PlayerId)]
current_player_ratings$IndividualOffense <- (current_player_ratings$IndividualOffense / 100) / current_player_ratings$UsgPct
current_player_ratings$PlaymakingOffense <- (current_player_ratings$PlaymakingOffense / 100) / (1 - current_player_ratings$UsgPct)
current_player_ratings$Defense <- -current_player_ratings$Defense / 100 # reverse sign for defense
modified_player_ratings$IndividualOffense <- (modified_player_ratings$IndividualOffense / 100) / modified_player_ratings$UsgPct
modified_player_ratings$PlaymakingOffense <- (modified_player_ratings$PlaymakingOffense / 100) / (1 - modified_player_ratings$UsgPct)
modified_player_ratings$Defense <- -modified_player_ratings$Defense / 100 # reverse sign for defense
# take modified vs current rating delta
delta_cols <- c("IndividualOffense", "PlaymakingOffense", "Defense")
modified_player_ratings[, delta_cols] <- modified_player_ratings[, delta_cols] -
current_player_ratings[match(modified_player_ratings$PlayerId, current_player_ratings$PlayerId), delta_cols]
minutes_proj <- dbReadTable(aws_pool, "NBA.Projected_Minutes_Sim")
minutes_proj[minutes_proj$NBAStatsGameId==42100125]
minutes_proj[minutes_proj$NBAStatsGameId==42100125,]
# Drop minutes when missing for one team
minutes_proj_tm_unique <- unique(minutes_proj[minutes_proj$PredictedMinutes > 0, c("GameId", "TeamId")])
minutes_proj_tm_unique <- table(minutes_proj_tm_unique$GameId)
minutes_proj <- minutes_proj[minutes_proj$GameId %in% as.numeric(names(minutes_proj_tm_unique)[minutes_proj_tm_unique == 2]), ]
minutes_proj[minutes_proj$NBAStatsGameId==42100125,]
sim_game <- dbReadTable(aws_pool, "NBA.Simulation_Game")
sim_game <- sim_game[which(sim_game$ZBPred == 0), ]
sim_game <- sim_game[which(sim_game$MinutesPred == 6), ]
sim_game <- sim_game[order(sim_game$NBAStatsGameId), ]
sim_game <- sim_game[sim_game$GameId %in% unique(minutes_proj$GameId), ]
sim_game <- sim_game[sim_game$NBAStatsGameId %in% upcoming_games$GameId, ]
sim_game <- sim_game[which(sim_game$GameDate >= Sys.Date() - 1), ] # allow for game day updates due to UTC time
sim_game[sim_game$NBAStatsGameId==42100125,]
minutes_proj[minutes_proj$NBAStatsGameId==42100125,]
sim_game <- dbReadTable(aws_pool, "NBA.Simulation_Game")
sim_game <- dbReadTable(aws_pool, "NBA.Simulation_Game")
sim_game[sim_game$NBAStatsGameId==42100125,]
sim_game <- sim_game[which(sim_game$ZBPred == 0), ]
sim_game[sim_game$NBAStatsGameId==42100125,]
sim_game <- sim_game[which(sim_game$MinutesPred == 6), ]
sim_game[sim_game$NBAStatsGameId==42100125,]
sim_game <- sim_game[order(sim_game$NBAStatsGameId), ]
sim_game[sim_game$NBAStatsGameId==42100125,]
sim_game <- sim_game[sim_game$GameId %in% unique(minutes_proj$GameId), ]
sim_game[sim_game$NBAStatsGameId==42100125,]
upcoming_games
setwd("~/Documents/CBB")
saveRDS(raw_pbp, file=paste0("pbp", season,".RDS"))
library(bigballR)
library(ncaahoopR)
library(hoopR)
library(dplyr)
library(RMySQL)
library(dbx)
library(readr)
library(doParallel)
library(stringi)
library(tidyr)
library(arrow)
season = "2021-22"
connection <- dbConnect(MySQL(), user = 'root', password = 'tarheels2020', host = 'localhost', dbname = 'CBB')
players<-dbGetQuery(connection,paste0("SELECT * FROM CBB.Proc_Players WHERE Season='", season, "';"))
games<-dbGetQuery(connection,paste0("SELECT * FROM CBB.Proc_Schedule WHERE Season='", season, "';"))
teams<-dbGetQuery(connection,paste0("SELECT * FROM CBB.Proc_Teams WHERE Season='", season, "';"))
raw_pbp <- readRDS(raw_pbp, file=paste0("pbp", season,".RDS"))
raw_pbp <- readRDS(file=paste0("pbp", season,".RDS"))
# Get shot numbers
pbp <- raw_pbp %>%
mutate(
FGA = as.integer(Shot_Value>1),
FTA = as.integer(Shot_Value==1),
FGA = ifelse(FTA==1, NA, FGA),
TotalScore = Home_Score + Away_Score,
Date=as.Date(Date, "%m/%d/%Y"),
GameId=as.integer(ID)
) %>%
group_by(ID) %>%
arrange(TotalScore, Game_Seconds) %>%
mutate(
ShotNumber = cumsum(coalesce(FGA, 0)) + FGA*0,
PlayNumber = cumsum(!is.na(ID)),
MaxShotNumber = max(ShotNumber,na.rm=TRUE)
) %>%
ungroup() %>%
filter(is.finite(MaxShotNumber))
mbb_pbp <- load_mbb_pbp(seasons=as.integer(substring(season,1,4))+1)
mbb_pbp <- mbb_pbp %>%
inner_join(games %>% select(GameId, Date, game_id=ESPN_GameId)) %>%
mutate(
ESPN_FGA = ifelse((score_value>=2) | ((score_value==1) & (is.na(type_text))), 1, NA),
ESPN_FTA = ifelse((score_value==1) & (!is.na(type_text)), 1, NA),
ESPN_TotalScore = home_score+away_score,
Date = as.Date(Date),
ESPN_Game_Seconds = ifelse(qtr<2, 1200, ifelse(qtr<3, 2400, 2400+300*(qtr-2))) - 60*as.integer(clock_minutes) - as.integer(clock_seconds)
) %>%
group_by(game_id) %>%
arrange(ESPN_TotalScore, ESPN_Game_Seconds, -as.integer(sequence_number), desc=TRUE) %>%
mutate(
ESPN_ShotNumber = cumsum(coalesce(ESPN_FGA, 0)) + ESPN_FGA*0,
PlayNumber = cumsum(!is.na(game_id)),
MaxESPN_ShotNumber = max(ESPN_ShotNumber, na.rm=TRUE)
) %>%
ungroup()
shot_info <- mbb_pbp %>%
rename(
ESPN_GameId = game_id,
ESPN_Home_TeamName=home_team_name,
ESPN_Home_TeamId=home_team_id,
ESPN_Away_TeamName=away_team_name,
ESPN_Away_TeamId=away_team_id,
ESPN_Home_Score=home_score,
ESPN_Away_Score=away_score,
ESPN_Description=text,
ESPN_Player1Id=participants_0_athlete_id,
ESPN_Player2Id=participants_1_athlete_id,
ESPN_Shot_X = coordinate_x,
ESPN_Shot_Y = coordinate_y,
) %>%
# only need shots
filter(!is.na(ESPN_ShotNumber)) %>%
select(
GameId, ESPN_GameId, ESPN_Home_TeamName, ESPN_Home_TeamId, ESPN_Away_TeamName, ESPN_Away_TeamId,
ESPN_Home_Score, ESPN_Away_Score, ESPN_Game_Seconds,MaxESPN_ShotNumber,
ESPN_Description, ESPN_Player1Id, ESPN_Player2Id, ESPN_Shot_X, ESPN_Shot_Y, ESPN_ShotNumber
)
pbp <- pbp %>%
inner_join(teams %>% select(Home=TeamName, HomeTeamId=TeamId, NCAAHomeTeamId=NCAATeamId)) %>%
inner_join(teams %>% select(Away=TeamName, AwayTeamId=TeamId, NCAAAwayTeamId=NCAATeamId)) %>%
left_join(teams %>% select(Event_Team=TeamName, EventTeamId=TeamId, NCAAEventTeamId=NCAATeamId)) %>%
left_join(players %>% select(Player_1=NCAAPlayerName, Player1Id=ESPN_PlayerId, NCAAEventTeamId=NCAATeamId)) %>%
left_join(players %>% select(Player_2=NCAAPlayerName, Player2Id=ESPN_PlayerId, NCAAEventTeamId=NCAATeamId))
for(col in c(paste0("Home.", 1:5), paste0("Away.", 1:5))){
hm_away_col = ifelse(grepl("Home", col), "NCAAHomeTeamId", "NCAAAwayTeamId")
new_col= paste0(gsub("\\.","Player",col), "Id")
pbp <- pbp %>%
left_join(players %>% select(NCAAPlayerName, ESPN_PlayerId, NCAATeamId) %>%
setNames(c(paste(col),paste(new_col), paste(hm_away_col))) )
}
colnames(pbp)
unique(pbp$Half_Status)
mean(pbp$Half_Status)
mode(pbp$Half_Status)
mode(pbp$Time)
unique(pbp$Time)
max(pbp$Time)
max(pbp$Game_Time)
View(pbp)
proc_pbp <- pbp %>%
left_join(shot_info, by= c("GameId"="GameId", "MaxShotNumber"="MaxESPN_ShotNumber",
"ShotNumber"="ESPN_ShotNumber")) %>%
group_by(GameId) %>%
arrange(PlayNumber) %>%
mutate(
# only marginal points when on offense
HomeMarginalPoints = Home_Score -lag(Home_Score, default=0),
AwayMarginalPoints = Away_Score -lag(Away_Score, default=0),
HomeMarginalPoints=ifelse(is.na(HomeMarginalPoints),0,HomeMarginalPoints),
AwayMarginalPoints=ifelse(is.na(AwayMarginalPoints),0,AwayMarginalPoints)
) %>%
ungroup() %>%
mutate(
Event_Type = ifelse(Event_Type=="Unk", "Dunk", Event_Type),
NCAANonEventTeamId= ifelse(NCAAEventTeamId==NCAAHomeTeamId, NCAAAwayTeamId, NCAAHomeTeamId),
NCAAOffTeamId = ifelse(Event_Type %in% c("won Jumpball", "Three Point Jumper", "Two Point Jumper", "Hook",
"Turnover", "Offensive Rebound", "Layup", "Draw Foul",
"Free Throw", "Dunk", "null Turnover", "Tip In" ),
NCAAEventTeamId, NCAANonEventTeamId),
NCAADefTeamId = ifelse(Event_Type %in% c("Defensive Rebound", "Steal", "Commits Foul", "Blocked Shot",
"lost Jumpball"), NCAAEventTeamId, NCAANonEventTeamId),
NCAAOffTeamId = ifelse(Event_Type %in% c("Media Timeout", "Team Timeout", "Second Timeout", "ERROR CHECK THE EVENT",
"Timeout", "Leaves Game", "Enters Game", "ERROR CHECK THE EVENT", "media Timeout",
"Deadball Rebound", "held Jumpball"),
NA, NCAAOffTeamId),
NCAADefTeamId = ifelse(Event_Type %in% c("Media Timeout", "Team Timeout", "Second Timeout", "ERROR CHECK THE EVENT",
"Timeout", "Leaves Game", "Enters Game", "ERROR CHECK THE EVENT", "media Timeout",
"Deadball Rebound", "held Jumpball"),
NA, NCAADefTeamId),
NCAAOffTeamId = case_when( is.na(NCAAOffTeamId) & is.na(NCAADefTeamId) & (HomeMarginalPoints>0)~NCAAHomeTeamId,
is.na(NCAAOffTeamId) & is.na(NCAADefTeamId) & (AwayMarginalPoints>0)~NCAAAwayTeamId,
TRUE~NCAAOffTeamId),
NCAADefTeamId = ifelse(NCAAOffTeamId==NCAAHomeTeamId, NCAAAwayTeamId, NCAAHomeTeamId)
) %>%
group_by(GameId) %>%
arrange(PlayNumber) %>%
fill(NCAAOffTeamId, NCAADefTeamId, .direction = "down") %>%
ungroup() %>%
group_by(GameId, NCAAOffTeamId) %>%
arrange(PlayNumber) %>%
mutate(
# only marginal points when on offense
HomeMarginalPoints = ifelse(NCAAOffTeamId==NCAAHomeTeamId,
Home_Score -lag(Home_Score, default=0), 0),
AwayMarginalPoints = ifelse(NCAAOffTeamId==NCAAAwayTeamId,
Away_Score -lag(Away_Score, default=0), 0),
HomeMarginalPoints=ifelse(is.na(HomeMarginalPoints),0,HomeMarginalPoints),
AwayMarginalPoints=ifelse(is.na(AwayMarginalPoints),0,AwayMarginalPoints)
) %>%
select(
GameId, Home, Away, HomeTeamId, AwayTeamId, NCAAHomeTeamId, NCAAAwayTeamId, Half=Half_Status, GameClock=Time,
GameSeconds=Game_Seconds, HomeScore=Home_Score, AwayScore=Away_Score, PossNum=Poss_Num, PlayNumber, ShotNumber,
EventDescription=Event_Description, EventType=Event_Type, EventResult=Event_Result,HomeMarginalPoints, AwayMarginalPoints,
Event_Length=Event_Length, Poss_Length=Poss_Length, Transition=isTransition, ShotValue=Shot_Value,
GarbageTime=isGarbageTime,
FGA, FTA, NCAAEventTeamId, NCAANonEventTeamId, NCAAOffTeamId, NCAADefTeamId,
Player1Name=Player_1, Player2Name=Player_2,
HomePlayer1Name=Home.1, HomePlayer2Name=Home.2, HomePlayer3Name=Home.3, HomePlayer4Name=Home.4, HomePlayer5Name=Home.5,
AwayPlayer1Name=Away.1, AwayPlayer2Name=Away.2, AwayPlayer3Name=Away.3, AwayPlayer4Name=Away.4, AwayPlayer5Name=Away.5,
Player1Id, Player2Id,
HomePlayer1Id, HomePlayer2Id, HomePlayer3Id, HomePlayer4Id, HomePlayer5Id,
AwayPlayer1Id, AwayPlayer2Id, AwayPlayer3Id, AwayPlayer4Id, AwayPlayer5Id,
ESPN_Player1Id, ESPN_Player2Id, ESPN_Shot_X, ESPN_Shot_Y, ESPN_Description
) %>%
inner_join(games %>% select(GameId, Season, Date) %>% mutate(Date=as.Date(Date)))
dbxUpsert(connection, "Proc_PBP", proc_pbp, where_cols = c("GameId", "PlayNumber"),
batch_size=5000)
write_dataset(
proc_pbp,
paste0("pbp", season,".parquet"),
format = c("parquet"),
partitioning = "Season"
)
write_dataset(
proc_pbp,
paste0("pbp", season,".parquet"),
format = c("parquet")
)
write_parquet(proc_pbp,
paste0("pbp", season,".parquet"))
write_parquet(proc_pbp,
paste0("pbp", season,".parquet"))
